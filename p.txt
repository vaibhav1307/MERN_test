Project Title:
MERN Dashboard with CSV File Upload & Authentication

Project Description:
Build a full stack MERN application that includes user authentication, a protected dashboard, and CSV file upload functionality. After a successful login, users should see a single-page application (SPA) with a consistent layout (navbar, header, and footer) and a dashboard where they can upload a CSV file containing up to 1 crore rows. The CSV data should be streamed, processed in batches, stored in a MongoDB Atlas cluster, and then displayed in a paginated table.

Detailed Instructions:

1. Backend (Node.js/Express & MongoDB)
Project Setup:

Initialize a new Node.js project (npm init).
Install necessary dependencies:
express, cors, dotenv, mongoose, bcrypt, jsonwebtoken, multer, and a CSV parser library (e.g., csv-parser or fast-csv).
Create a .env file with the following environment variables:
PORT (server port)
MONGODB_URI (MongoDB Atlas connection string)
JWT_SECRET (secret key for JWT signing)
Server & Middleware:

Create an Express server.
Set up middleware:
cors to allow cross-origin requests.
express.json() for JSON request parsing.
dotenv to load environment variables.
User Authentication:

Mongoose User Model:
Define a schema with fields like email and password.
Endpoints:
POST /api/auth/register:
Accepts user registration data.
Hash the password using bcrypt.
Save the user to MongoDB.
POST /api/auth/login:
Validate user credentials.
On successful login, generate a JWT using jsonwebtoken.
Auth Middleware:
Create middleware that verifies the JWT for protected routes.
CSV File Upload & Processing:

File Upload Endpoint (POST /api/upload):
Use multer to handle file uploads.
Accept only CSV files and validate file size/type.
CSV Processing:
Stream the CSV file using the chosen CSV parser.
Process the file row-by-row, batching inserts into MongoDB (to handle up to 1 crore rows efficiently).
Implement error handling for malformed CSV files.
Data Retrieval Endpoint:

GET /api/data:
Retrieve and return CSV data from MongoDB.
Support pagination via query parameters (e.g., page number, limit).


2. Frontend (React)
Project Setup:

Create a React application (using Create React App or Vite).
Install dependencies:
react-router-dom, axios (or use the fetch API), and a UI library (choose one: Material UI, Tailwind CSS, or Bootstrap).
Routing & Layout:

React Router Setup:
Create public routes (e.g., /login).
Create a protected route (/dashboard) that is accessible only if the user is authenticated.
Common Layout Component:
Include a navbar, header, and footer.
Ensure a consistent look across the application.
Authentication:

Login Component:
Build a login form with email and password fields.
On submit, call the /api/auth/login endpoint.
On successful login, store the JWT (in localStorage or React Context) and redirect to the dashboard.
Protected Route Component:
Create a higher-order component (or use a custom hook) to check authentication before rendering protected components.
Dashboard & CSV Upload:

Dashboard Landing Page:
Display a header with the text “Input your csv file.”
FileUpload Component:
Provide a file input and an upload button.
Show a progress indicator or spinner during the upload process.
After the CSV is processed, fetch and display the CSV data below in a table.
Implement pagination for the table to handle large datasets.
Optionally add search or filter functionality for enhanced data interaction.
User Feedback & Error Handling:

Display notifications or alerts for:
Successful logins.
File upload errors (invalid file type, size issues, processing errors).
Any network/API errors.
Use loading spinners or indicators during asynchronous operations (login, file upload, data fetch).

Responsive & Visually Appealing UI:
Ensure that the UI is responsive across different devices.
Use a consistent color scheme, professional typography, and clean spacing.
Consider smooth animations or transitions for user interactions.
Security:
Secure all API endpoints (e.g., validate input, sanitize data).
Use HTTPS in production.
Implement rate limiting if necessary to prevent abuse.
Documentation:
Create a README with setup instructions, API documentation, and deployment steps.
Document code and endpoints for future reference or examiners.

Using the detailed instructions above, please create a fully functional MERN stack application with user authentication, a protected dashboard, CSV file upload with streaming and batch processing, and a visually appealing, responsive UI. Ensure to implement robust error handling, testing (both frontend and backend), and deployment instructions as described.

use below connection string to connect to mongodb atlas :-
mongodb+srv://<db_username>:<db_password>@merntest1.9k49c.mongodb.net/?retryWrites=true&w=majority&appName=MernTest1


Asynchronous Processing:
For very large files, consider using a message queue (e.g., RabbitMQ, Kafka) to process the CSV data asynchronously. This will prevent the server from blocking while processing the file.

all files:-

1 :-

import React from 'react';

import { Outlet, Link, useNavigate } from 'react-router-dom';

import { LogOut, Upload, LayoutDashboard } from 'lucide-react';

import { useAuth } from '../context/AuthContext';



export default function Layout() {

  const { isAuthenticated, logout } = useAuth();

  const navigate = useNavigate();



  const handleLogout = () => {

    logout();

    navigate('/login');

  };



  return (

    <div className="min-h-screen bg-gray-50">

      {/* Navbar */}

      <nav className="bg-white shadow-sm">

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">

          <div className="flex justify-between h-16">

            <div className="flex">

              <Link to="" className="flex items-center">

                <LayoutDashboard className="h-8 w-8 text-indigo-600" />

                <span className="ml-2 text-xl font-bold text-gray-900">

                  MERN Dashboard

                </span>

              </Link>

            </div>

            

            {isAuthenticated && (

              <div className="flex items-center">

                <Link

                  to="/dashboard"

                  className="text-gray-600 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium"

                >

                  Dashboard

                </Link>

                <button

                  onClick={handleLogout}

                  className="ml-4 flex items-center text-gray-600 hover:text-gray-900"

                >

                  <LogOut className="h-5 w-5 mr-1" />

                  Logout

                </button>

              </div>

            )}

          </div>

        </div>

      </nav>



      {/* Main Content */}

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">

        <Outlet />

      </main>



      {/* Footer */}

      <footer className="bg-white shadow-sm mt-auto">

        <div className="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">

          <p className="text-center text-gray-500 text-sm">

            © 2024 MERN Dashboard. All rights reserved.

          </p>

        </div>

      </footer>

    </div>

  );

}



2 -

import React, { useState, useCallback } from 'react';

import { Upload, FileUp, Loader2 } from 'lucide-react';

import { toast } from 'react-hot-toast';

import DataTable from '../components/DataTable';

import { useAuth } from '../context/AuthContext';



export default function Dashboard() {

  const [isUploading, setIsUploading] = useState(false);

  const [uploadProgress, setUploadProgress] = useState(0);

  const { token } = useAuth();



  const handleFileUpload = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {

    const file = event.target.files?.[0];

    if (!file) return;



    // Validate file type

    if (!file.name.endsWith('.csv')) {

      toast.error('Please upload a CSV file');

      return;

    }



    setIsUploading(true);

    setUploadProgress(0);



    const formData = new FormData();

    formData.append('file', file);



    try {

      const response = await fetch('http://localhost:5000/csv/upload', {

        method: 'POST',

        headers: {

          'Authorization': `Bearer ${token}`

        },

        body: formData

      });



      if (!response.ok) {

        throw new Error('Upload failed');

      }



      toast.success('File uploaded successfully');

    } catch (error) {

      console.error('Upload error:', error);

      toast.error('Failed to upload file');

    } finally {

      setIsUploading(false);

      setUploadProgress(0);

    }

  }, [token]);



  return (

    <div className="space-y-8">

      {/* Header */}

      <div className="bg-white p-6 rounded-lg shadow-sm">

        <h1 className="text-2xl font-bold text-gray-900">Dashboard</h1>

        <p className="mt-2 text-gray-600">Upload and manage your CSV files</p>

      </div>



      {/* Upload Section */}

      <div className="bg-white p-8 rounded-lg shadow-sm">

        <div className="max-w-xl mx-auto text-center">

          <Upload className="mx-auto h-12 w-12 text-gray-400" />

          <h2 className="mt-4 text-xl font-semibold text-gray-900">

            Upload your CSV file

          </h2>

          <p className="mt-2 text-gray-500">

            Drag and drop your CSV file here, or click to select a file

          </p>

          

          <div className="mt-8">

            <label className="relative">

              <input

                type="file"

                className="hidden"

                accept=".csv"

                onChange={handleFileUpload}

                disabled={isUploading}

              />

              <div className={`

                flex items-center justify-center px-6 py-4 border-2 border-dashed

                rounded-lg cursor-pointer hover:border-indigo-500 transition-colors

                ${isUploading ? 'bg-gray-50 border-gray-300' : 'border-gray-300 hover:bg-gray-50'}

              `}>

                {isUploading ? (

                  <div className="flex items-center space-x-3">

                    <Loader2 className="h-5 w-5 animate-spin text-indigo-500" />

                    <span className="text-gray-600">Uploading... {uploadProgress}%</span>

                  </div>

                ) : (

                  <div className="flex items-center space-x-3">

                    <FileUp className="h-5 w-5 text-gray-400" />

                    <span className="text-gray-600">Select CSV file</span>

                  </div>

                )}

              </div>

            </label>

          </div>



          <div className="mt-4 text-sm text-gray-500">

            Maximum file size: 50MB

          </div>

        </div>

      </div>



      {/* Data Table */}

      <div className="bg-white rounded-lg shadow-sm">

        <DataTable />

      </div>

    </div>

  );

}



3-

import React from 'react';

import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';

import { Toaster } from 'react-hot-toast';

import { AuthProvider } from './context/AuthContext';

import Layout from './components/Layout';

import ProtectedRoute from './components/ProtectedRoute';

import Login from './pages/Login';

import Dashboard from './pages/Dashboard';

import Signup from './pages/Signup';



function App() {

    return (

        <AuthProvider>

            <BrowserRouter>

                <Toaster position="top-right" />

                <Routes>

                    <Route path="/" element={<Layout />}>

                        <Route index element={<Navigate to="/signup" replace />} /> {/* Changed to /signup */}

                        <Route path="login" element={<Login />} />

                        <Route path="signup" element={<Signup />} />

                        <Route

                            path="dashboard"

                            element={

                                <ProtectedRoute>

                                    <Dashboard />

                                </ProtectedRoute>

                            }

                        />

                    </Route>

                </Routes>

            </BrowserRouter>

        </AuthProvider>

    );

}



export default App;



4-

import React, { createContext, useContext, useState, useEffect } from 'react';

import { AuthState, User, LoginCredentials } from '../types/auth';

import axios from 'axios';

import { toast } from 'react-hot-toast';



interface AuthContextType extends AuthState {

    login: (credentials: LoginCredentials | string) => Promise<void>;

    logout: () => void;

}



const AuthContext = createContext<AuthContextType | null>(null);



const API_URL = 'http://localhost:5000';



export function AuthProvider({ children }: { children: React.ReactNode }) {

    const [authState, setAuthState] = useState<AuthState>({

        user: null,

        token: localStorage.getItem('token'),

        isAuthenticated: false,

    });



    useEffect(() => {

        const token = localStorage.getItem('token');

        if (token) {

            fetchUserData(token);

        }

    }, [authState.token]);



    const fetchUserData = async (token: string) => {

        try {

            console.log("fetchUserData called");

            const response = await axios.get(`${API_URL}/auth/me`, {

                headers: { Authorization: `Bearer ${token}` }

            });

            setAuthState({

                user: response.data.user,

                token,

                isAuthenticated: true,

            });

        } catch (error) {

            localStorage.removeItem('token');

            setAuthState({

                user: null,

                token: null,

                isAuthenticated: false,

            });

        }

    };



    const login = async (credentials: LoginCredentials | string) => {

        try {

            console.log("login function called");

            let token: string;

            let user: User;



            if (typeof credentials === 'string') {

                // Handle token directly (from signup)

                token = credentials;

                // Fetch user data after setting the token to localStorage

                localStorage.setItem('token', token);

                await fetchUserData(token);

                return; // Important: Exit the function after handling signup

            } else {

                // Handle login credentials

                const response = await axios.post(`${API_URL}/auth/login`, credentials);

                ({ user, token } = response.data);

            }



            localStorage.setItem('token', token);

            setAuthState({

                user,

                token,

                isAuthenticated: true,

            });

            toast.success('Successfully logged in!');

        } catch (error) {

            toast.error('Login failed. Please check your credentials.');

            throw error;

        }

    };



    const logout = () => {

        localStorage.removeItem('token');

        setAuthState({

            user: null,

            token: null,

            isAuthenticated: false,

        });

        toast.success('Successfully logged out!');

    };



    return (

        <AuthContext.Provider value={{ ...authState, login, logout }}>

            {children}

        </AuthContext.Provider>

    );

}



export function useAuth() {

    const context = useContext(AuthContext);

    if (!context) {

        throw new Error('useAuth must be used within an AuthProvider');

    }

    return context;

}



5-



import express from 'express';

import jwt from 'jsonwebtoken';

import User from '../models/User.js';

import { authenticateToken } from '../middleware/auth.js';



const router = express.Router();



// Register new user

router.post('/register', async (req, res, next) => {

    try {

        const { email, password } = req.body;



        const existingUser = await User.findOne({ email });

        if (existingUser) {

            return res.status(400).json({ message: 'Email already registered' });

        }



        const user = new User({ email, password });

        await user.save();



        const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {

            expiresIn: '24h'

        });



        res.status(201).json({

            user: { id: user._id, email: user.email },

            token

        });

    } catch (error) {

        next(error);

    }

});



// Login user

router.post('/login', async (req, res, next) => { // Removed /auth prefix

    try {

        const { email, password } = req.body;



        const user = await User.findOne({ email });

        if (!user) {

            return res.status(401).json({ message: 'Invalid credentials' });

        }



        const isMatch = await user.comparePassword(password);

        if (!isMatch) {

            return res.status(401).json({ message: 'Invalid credentials' });

        }



        const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {

            expiresIn: '24h'

        });



        res.json({

            user: { id: user._id, email: user.email },

            token

        });

    } catch (error) {

        next(error);

    }

});



// Get current user

router.get('/me', authenticateToken, (req, res) => { // Removed /auth prefix

    res.json({ user: req.user });

});



export default router;



6-

import express from 'express';

import cors from 'cors';

import dotenv from 'dotenv';

import mongoose from 'mongoose';

import rateLimit from 'express-rate-limit';



import authRoutes from './routes/auth.js';

import csvRoutes from './routes/csv.js';

import { errorHandler } from './middleware/errorHandler.js';



dotenv.config();



const app = express();



// Rate limiting

const limiter = rateLimit({

    windowMs: 15 * 60 * 1000, // 15 minutes

    max: 100 // limit each IP to 100 requests per windowMs

});



// Middleware

app.use(cors());

app.use(express.json());

app.use(limiter);



// Routes

app.use('/auth', authRoutes);

app.use('/csv', csvRoutes);



// Error handling

app.use(errorHandler);



// MongoDB connection with improved error handling

mongoose.connect(process.env.MONGODB_URI)

    .then(() => {

        console.log('Successfully connected to MongoDB Atlas');

    })

    .catch((error) => {

        console.error('MongoDB connection error:', error);

        process.exit(1); // Exit process with failure

    });



// Start server

const PORT = process.env.PORT || 5000;

app.listen(PORT, () => {

    console.log(`Server running on port ${PORT}`);

});



7-



import mongoose from 'mongoose';



const csvDataSchema = new mongoose.Schema({

  userId: {

    type: mongoose.Schema.Types.ObjectId,

    ref: 'User',

    required: true

  },

  fileName: {

    type: String,

    required: true

  },

  data: {

    type: [mongoose.Schema.Types.Mixed],

    required: true

  },

  uploadedAt: {

    type: Date,

    default: Date.now

  }

});



// Index for efficient querying

csvDataSchema.index({ userId: 1, uploadedAt: -1 });



export default mongoose.model('CsvData', csvDataSchema);



8-

import { defineConfig } from 'vite';

import react from '@vitejs/plugin-react';



export default defineConfig({

    plugins: [react()],

    optimizeDeps: {

        exclude: ['lucide-react'],

    },

    server: {

        proxy: {

            '/api': {

                target: 'http://localhost:5000',

                changeOrigin: true,

                rewrite: (path) => path.replace(/^\/api/, ''),

            },

            '/auth': {

                target: 'http://localhost:5000',

                changeOrigin: true,

            },

        },

    },

});