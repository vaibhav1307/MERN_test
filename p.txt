Project Title:
MERN Dashboard with CSV File Upload & Authentication

Project Description:
Build a full stack MERN application that includes user authentication, a protected dashboard, and CSV file upload functionality. After a successful login, users should see a single-page application (SPA) with a consistent layout (navbar, header, and footer) and a dashboard where they can upload a CSV file containing up to 1 crore rows. The CSV data should be streamed, processed in batches, stored in a MongoDB Atlas cluster, and then displayed in a paginated table.

Detailed Instructions:

1. Backend (Node.js/Express & MongoDB)
Project Setup:

Initialize a new Node.js project (npm init).
Install necessary dependencies:
express, cors, dotenv, mongoose, bcrypt, jsonwebtoken, multer, and a CSV parser library (e.g., csv-parser or fast-csv).
Create a .env file with the following environment variables:
PORT (server port)
MONGODB_URI (MongoDB Atlas connection string)
JWT_SECRET (secret key for JWT signing)
Server & Middleware:

Create an Express server.
Set up middleware:
cors to allow cross-origin requests.
express.json() for JSON request parsing.
dotenv to load environment variables.
User Authentication:

Mongoose User Model:
Define a schema with fields like email and password.
Endpoints:
POST /api/auth/register:
Accepts user registration data.
Hash the password using bcrypt.
Save the user to MongoDB.
POST /api/auth/login:
Validate user credentials.
On successful login, generate a JWT using jsonwebtoken.
Auth Middleware:
Create middleware that verifies the JWT for protected routes.
CSV File Upload & Processing:

File Upload Endpoint (POST /api/upload):
Use multer to handle file uploads.
Accept only CSV files and validate file size/type.
CSV Processing:
Stream the CSV file using the chosen CSV parser.
Process the file row-by-row, batching inserts into MongoDB (to handle up to 1 crore rows efficiently).
Implement error handling for malformed CSV files.
Data Retrieval Endpoint:

GET /api/data:
Retrieve and return CSV data from MongoDB.
Support pagination via query parameters (e.g., page number, limit).


2. Frontend (React)
Project Setup:

Create a React application (using Create React App or Vite).
Install dependencies:
react-router-dom, axios (or use the fetch API), and a UI library (choose one: Material UI, Tailwind CSS, or Bootstrap).
Routing & Layout:

React Router Setup:
Create public routes (e.g., /login).
Create a protected route (/dashboard) that is accessible only if the user is authenticated.
Common Layout Component:
Include a navbar, header, and footer.
Ensure a consistent look across the application.
Authentication:

Login Component:
Build a login form with email and password fields.
On submit, call the /api/auth/login endpoint.
On successful login, store the JWT (in localStorage or React Context) and redirect to the dashboard.
Protected Route Component:
Create a higher-order component (or use a custom hook) to check authentication before rendering protected components.
Dashboard & CSV Upload:

Dashboard Landing Page:
Display a header with the text “Input your csv file.”
FileUpload Component:
Provide a file input and an upload button.
Show a progress indicator or spinner during the upload process.
After the CSV is processed, fetch and display the CSV data below in a table.
Implement pagination for the table to handle large datasets.
Optionally add search or filter functionality for enhanced data interaction.
User Feedback & Error Handling:

Display notifications or alerts for:
Successful logins.
File upload errors (invalid file type, size issues, processing errors).
Any network/API errors.
Use loading spinners or indicators during asynchronous operations (login, file upload, data fetch).

Responsive & Visually Appealing UI:
Ensure that the UI is responsive across different devices.
Use a consistent color scheme, professional typography, and clean spacing.
Consider smooth animations or transitions for user interactions.
Security:
Secure all API endpoints (e.g., validate input, sanitize data).
Use HTTPS in production.
Implement rate limiting if necessary to prevent abuse.
Documentation:
Create a README with setup instructions, API documentation, and deployment steps.
Document code and endpoints for future reference or examiners.

Using the detailed instructions above, please create a fully functional MERN stack application with user authentication, a protected dashboard, CSV file upload with streaming and batch processing, and a visually appealing, responsive UI. Ensure to implement robust error handling, testing (both frontend and backend), and deployment instructions as described.

use below connection string to connect to mongodb atlas :-
mongodb+srv://<db_username>:<db_password>@merntest1.9k49c.mongodb.net/?retryWrites=true&w=majority&appName=MernTest1


Asynchronous Processing:
For very large files, consider using a message queue (e.g., RabbitMQ, Kafka) to process the CSV data asynchronously. This will prevent the server from blocking while processing the file.

all files :-






























the current application is able to accept 5-10kb csv files and displaying it

but when select csv file above 1mb, the api fails 

Request URL:

http://localhost:5000/csv/uploadRequest Method:

POSTStatus Code:

500 Internal Server ErrorRemote Address:

[::1]:5000Referrer Policy:

strict-origin-when-cross-origin



------WebKitFormBoundaryArSCBldU21QwODI5

Content-Disposition: form-data; name="file"; filename="pps__standalone_ic_admin_metric_table (1).csv"

Content-Type: text/csv





------WebKitFormBoundaryArSCBldU21QwODI5--



response :- {"message":"Internal server error"}



here are related files for you to find and fix issue :-



backend/src/models/CsvData.js -

import mongoose from 'mongoose';



const csvDataSchema = new mongoose.Schema({

  userId: {

    type: mongoose.Schema.Types.ObjectId,

    ref: 'User',

    required: true

  },

  fileName: {

    type: String,

    required: true

  },

  data: {

    type: [mongoose.Schema.Types.Mixed],

    required: true

  },

  uploadedAt: {

    type: Date,

    default: Date.now

  }

});



// Index for efficient querying

csvDataSchema.index({ userId: 1, uploadedAt: -1 });



export default mongoose.model('CsvData', csvDataSchema);

backend/src/routes/csv.js -

import express from 'express';

import multer from 'multer';

import { parse } from 'csv-parse';

import { Readable } from 'stream';

import { authenticateToken } from '../middleware/auth.js';

import CsvData from '../models/CsvData.js';



const router = express.Router();



// Configure multer for CSV upload

const upload = multer({

  limits: {

    fileSize: 1024 * 1024 * 50, // 50MB limit

  },

  fileFilter: (req, file, cb) => {

    if (file.mimetype !== 'text/csv') {

      return cb(new Error('Only CSV files are allowed'));

    }

    cb(null, true);

  }

});



// Upload CSV

router.post('/upload', authenticateToken, upload.single('file'), async (req, res, next) => {

  try {

    if (!req.file) {

      return res.status(400).json({ message: 'No file uploaded' });

    }



    const results = [];

    const stream = Readable.from(req.file.buffer.toString());

    

    const parser = stream.pipe(parse({

      columns: true,

      skip_empty_lines: true

    }));



    for await (const record of parser) {

      results.push(record);

      

      // Process in batches of 1000

      if (results.length === 1000) {

        await CsvData.create({

          userId: req.user._id,

          fileName: req.file.originalname,

          data: results

        });

        results.length = 0; // Clear the array

      }

    }



    // Save any remaining records

    if (results.length > 0) {

      await CsvData.create({

        userId: req.user._id,

        fileName: req.file.originalname,

        data: results

      });

    }



    res.json({ message: 'CSV file processed successfully' });

  } catch (error) {

    next(error);

  }

});



// Get CSV data with pagination

router.get('/data', authenticateToken, async (req, res, next) => {

  try {

    const page = parseInt(req.query.page) || 1;

    const limit = parseInt(req.query.limit) || 10;

    const skip = (page - 1) * limit;



    const data = await CsvData.find({ userId: req.user._id })

      .sort({ uploadedAt: -1 })

      .skip(skip)

      .limit(limit);



    const total = await CsvData.countDocuments({ userId: req.user._id });



    res.json({

      data,

      pagination: {

        total,

        page,

        pages: Math.ceil(total / limit)

      }

    });

  } catch (error) {

    next(error);

  }

});



export default router;



frontend :-



src/components/DataTable.tsx-

import React, { useState, useEffect } from 'react';

import { ChevronLeft, ChevronRight, Loader2 } from 'lucide-react';

import { useAuth } from '../context/AuthContext';



interface PaginationProps {

  total: number;

  page: number;

  pages: number;

  onPageChange: (page: number) => void;

}



function Pagination({ total, page, pages, onPageChange }: PaginationProps) {

  return (

    <div className="flex items-center justify-between px-4 py-3 border-t">

      <div className="flex-1 flex justify-between sm:hidden">

        <button

          onClick={() => onPageChange(page - 1)}

          disabled={page <= 1}

          className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"

        >

          Previous

        </button>

        <button

          onClick={() => onPageChange(page + 1)}

          disabled={page >= pages}

          className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"

        >

          Next

        </button>

      </div>

      <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">

        <div>

          <p className="text-sm text-gray-700">

            Showing page <span className="font-medium">{page}</span> of{' '}

            <span className="font-medium">{pages}</span> ({total} total records)

          </p>

        </div>

        <div>

          <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">

            <button

              onClick={() => onPageChange(page - 1)}

              disabled={page <= 1}

              className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50"

            >

              <ChevronLeft className="h-5 w-5" />

            </button>

            <button

              onClick={() => onPageChange(page + 1)}

              disabled={page >= pages}

              className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50"

            >

              <ChevronRight className="h-5 w-5" />

            </button>

          </nav>

        </div>

      </div>

    </div>

  );

}



export default function DataTable() {

  const [data, setData] = useState<any[]>([]);

  const [loading, setLoading] = useState(false);

  const [error, setError] = useState<string | null>(null);

  const [page, setPage] = useState(1);

  const [totalPages, setTotalPages] = useState(1);

  const [totalRecords, setTotalRecords] = useState(0);

  const { token } = useAuth();



  useEffect(() => {



    const fetchData = async () => {

      try {

        setLoading(true);

        const response = await fetch(

          `http://localhost:5000/csv/data?page=${page}&limit=10`,

          {

            headers: {

              'Authorization': `Bearer ${token}`

            }

          }

        );



        if (!response.ok) {

          throw new Error('Failed to fetch data');

        }



        const result = await response.json();

        setData(result.data);

        setTotalPages(result.pagination.pages);

        setTotalRecords(result.pagination.total);

      } catch (err) {

        setError(err instanceof Error ? err.message : 'An error occurred');

      } finally {

        setLoading(false);

      }

    };



    fetchData();

  }, [page, token]);



  if (error) {

    return (

      <div className="text-center py-8 text-red-600">

        Error: {error}

      </div>

    );

  }



  if (loading) {

    return (

      <div className="flex justify-center items-center py-8">

        <Loader2 className="h-8 w-8 animate-spin text-indigo-500" />

      </div>

    );

  }



  if (data.length === 0) {

    return (

      <div className="text-center py-8 text-gray-500">

        No data available. Upload a CSV file to get started.

      </div>

    );

  }



  // Dynamically get headers from the first data item

  const headers = Object.keys(data[0]?.data[0] || {});



  return (

    <div className="overflow-x-auto">

      <table className="min-w-full divide-y divide-gray-200">

        <thead className="bg-gray-50">

          <tr>

            {headers.map((header) => (

              <th

                key={header}

                scope="col"

                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"

              >

                {header}

              </th>

            ))}

          </tr>

        </thead>

        <tbody className="bg-white divide-y divide-gray-200">

          {data.map((item) => (

            item.data.map((row: any, rowIndex: number) => (

              <tr key={`${item._id}-${rowIndex}`}>

                {headers.map((header) => (

                  <td

                    key={header}

                    className="px-6 py-4 whitespace-nowrap text-sm text-gray-500"

                  >

                    {row[header]}

                  </td>

                ))}

              </tr>

            ))

          ))}

        </tbody>

      </table>



      <Pagination

        total={totalRecords}

        page={page}

        pages={totalPages}

        onPageChange={setPage}

      />

    </div>

  );

}

src/components/layout.tsx-

import React from 'react';

import { Outlet, Link, useNavigate } from 'react-router-dom';

import { LogOut, Upload, LayoutDashboard } from 'lucide-react';

import { useAuth } from '../context/AuthContext';



export default function Layout() {

  const { isAuthenticated, logout } = useAuth();

  const navigate = useNavigate();



  const handleLogout = () => {

    logout();

    navigate('/login');

  };



  return (

    <div className="min-h-screen bg-gray-50">

      {/* Navbar */}

      <nav className="bg-white shadow-sm">

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">

          <div className="flex justify-between h-16">

            <div className="flex">

              <Link to="/dashboard" className="flex items-center">

                <LayoutDashboard className="h-8 w-8 text-indigo-600" />

                <span className="ml-2 text-xl font-bold text-gray-900">

                  MERN Dashboard

                </span>

              </Link>

            </div>

            

            {isAuthenticated && (

              <div className="flex items-center">

                <Link

                  to="/dashboard"

                  className="text-gray-600 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium"

                >

                  Dashboard

                </Link>

                <button

                  onClick={handleLogout}

                  className="ml-4 flex items-center text-gray-600 hover:text-gray-900"

                >

                  <LogOut className="h-5 w-5 mr-1" />

                  Logout

                </button>

              </div>

            )}

          </div>

        </div>

      </nav>



      {/* Main Content */}

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">

        <Outlet />

      </main>



      {/* Footer */}

      <footer className="bg-white shadow-sm mt-auto">

        <div className="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">

          <p className="text-center text-gray-500 text-sm">

            © 2024 MERN Dashboard. All rights reserved.

          </p>

        </div>

      </footer>

    </div>

  );

}

src/context/AuthContext.tsx-

import React, { createContext, useContext, useState, useEffect } from 'react';

import { AuthState, User, LoginCredentials } from '../types/auth';

import axios from 'axios';

import { toast } from 'react-hot-toast';



interface AuthContextType extends AuthState {

    login: (credentials: LoginCredentials | string) => Promise<void>;

    logout: () => void;

}



const AuthContext = createContext<AuthContextType | null>(null);



const API_URL = 'http://localhost:5000';



export function AuthProvider({ children }: { children: React.ReactNode }) {

    const [authState, setAuthState] = useState<AuthState>({

        user: null,

        token: localStorage.getItem('token'),

        isAuthenticated: false,

    });



    useEffect(() => {

        const token = localStorage.getItem('token');

        if (token) {

            fetchUserData(token);

        }

    }, [authState.token]);



    const fetchUserData = async (token: string) => {

        try {

            console.log("fetchUserData called");

            const response = await axios.get(`${API_URL}/auth/me`, {

                headers: { Authorization: `Bearer ${token}` }

            });

            setAuthState({

                user: response.data.user,

                token,

                isAuthenticated: true,

            });

        } catch (error) {

            localStorage.removeItem('token');

            setAuthState({

                user: null,

                token: null,

                isAuthenticated: false,

            });

        }

    };



    const login = async (credentials: LoginCredentials | string) => {

        try {

            console.log("login function called");

            let token: string;

            let user: User;



            if (typeof credentials === 'string') {

                // Handle token directly (from signup)

                token = credentials;

                // Fetch user data after setting the token to localStorage

                localStorage.setItem('token', token);

                await fetchUserData(token);

                return; // Important: Exit the function after handling signup

            } else {

                // Handle login credentials

                const response = await axios.post(`${API_URL}/auth/login`, credentials);

                ({ user, token } = response.data);

            }



            localStorage.setItem('token', token);

            setAuthState({

                user,

                token,

                isAuthenticated: true,

            });

            toast.success('Successfully logged in!');

        } catch (error) {

            toast.error('Login failed. Please check your credentials.');

            throw error;

        }

    };



    const logout = () => {

        localStorage.removeItem('token');

        setAuthState({

            user: null,

            token: null,

            isAuthenticated: false,

        });

        toast.success('Successfully logged out!');

    };



    return (

        <AuthContext.Provider value={{ ...authState, login, logout }}>

            {children}

        </AuthContext.Provider>

    );

}



export function useAuth() {

    const context = useContext(AuthContext);

    if (!context) {

        throw new Error('useAuth must be used within an AuthProvider');

    }

    return context;

}

src/pages/Dashboard.tsx-

import React, { useState, useCallback } from 'react';

import { Upload, FileUp, Loader2 } from 'lucide-react';

import { toast } from 'react-hot-toast';

import DataTable from '../components/DataTable';

import { useAuth } from '../context/AuthContext';



export default function Dashboard() {

    const [isUploading, setIsUploading] = useState(false);

    const [uploadProgress, setUploadProgress] = useState(0);

    const { token } = useAuth();

    const [refreshData, setRefreshData] = useState(false); // Added refresh state



    const handleFileUpload = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {

        const file = event.target.files?.[0];

        if (!file) return;



        // Validate file type

        if (!file.name.endsWith('.csv')) {

            toast.error('Please upload a CSV file');

            return;

        }



        setIsUploading(true);

        setUploadProgress(0);



        const formData = new FormData();

        formData.append('file', file);



        try {

            const response = await fetch('http://localhost:5000/csv/upload', {

                method: 'POST',

                headers: {

                    'Authorization': `Bearer ${token}`

                },

                body: formData

            });



            if (!response.ok) {

                throw new Error('Upload failed');

            }



            // Assuming the server returns some data after uploading the file, handle it here.

            toast.success('File uploaded successfully');

            setRefreshData(true);



        } catch (error) {

            console.error('Upload error:', error);

            toast.error('Failed to upload file');

        } finally {

            console.log("Uploaded and setting")

            setIsUploading(false);

            setUploadProgress(0);

        }

    }, [token]);



    return (

        <div className="space-y-8">

            {/* Header */}

            <div className="bg-white p-6 rounded-lg shadow-sm">

                <h1 className="text-2xl font-bold text-gray-900">Dashboard</h1>

                <p className="mt-2 text-gray-600">Upload and manage your CSV files</p>

            </div>



            {/* Upload Section */}

            <div className="bg-white p-8 rounded-lg shadow-sm">

                <div className="max-w-xl mx-auto text-center">

                    <Upload className="mx-auto h-12 w-12 text-gray-400" />

                    <h2 className="mt-4 text-xl font-semibold text-gray-900">

                        Upload your CSV file

                    </h2>

                    <p className="mt-2 text-gray-500">

                        Drag and drop your CSV file here, or click to select a file

                    </p>



                    <div className="mt-8">

                        <label className="relative">

                            <input

                                type="file"

                                className="hidden"

                                accept=".csv"

                                onChange={handleFileUpload}

                                disabled={isUploading}

                            />

                            <div className={`

                                flex items-center justify-center px-6 py-4 border-2 border-dashed

                                rounded-lg cursor-pointer hover:border-indigo-500 transition-colors

                                ${isUploading ? 'bg-gray-50 border-gray-300' : 'border-gray-300 hover:bg-gray-50'}

                            `}>

                                {isUploading ? (

                                    <div className="flex items-center space-x-3">

                                        <Loader2 className="h-5 w-5 animate-spin text-indigo-500" />

                                        <span className="text-gray-600">Uploading... {uploadProgress}%</span>

                                    </div>

                                ) : (

                                    <div className="flex items-center space-x-3">

                                        <FileUp className="h-5 w-5 text-gray-400" />

                                        <span className="text-gray-600">Select CSV file</span>

                                    </div>

                                )}

                            </div>

                        </label>

                    </div>



                    <div className="mt-4 text-sm text-gray-500">

                        Maximum file size: 50MB

                    </div>

                </div>

            </div>



            {/* Data Table */}

            <div className="bg-white rounded-lg shadow-sm">

                {refreshData ? 

                <DataTable /> : <div></div>}

            </div>

        </div>

    );

}



app.tsx-

import React from 'react';

import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';

import { Toaster } from 'react-hot-toast';

import { AuthProvider } from './context/AuthContext';

import Layout from './components/Layout';

import ProtectedRoute from './components/ProtectedRoute';

import Login from './pages/Login';

import Dashboard from './pages/Dashboard';

import Signup from './pages/Signup';



function App() {

    return (

        <AuthProvider>

            <BrowserRouter>

                <Toaster position="top-right" />

                <Routes>

                    <Route path="/" element={<Layout />}>

                        <Route index element={<Navigate to="/signup" replace />} /> {/* Changed to /signup */}

                        <Route path="login" element={<Login />} />

                        <Route path="signup" element={<Signup />} />

                        <Route

                            path="dashboard"

                            element={

                                <ProtectedRoute>

                                    <Dashboard />

                                </ProtectedRoute>

                            }

                        />

                    </Route>

                </Routes>

            </BrowserRouter>

        </AuthProvider>

    );

}



export default App;

